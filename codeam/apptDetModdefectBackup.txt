'use strict';

/**
 * @class appointmentDetails.controllers.appointmentDetailsModalCtrl
 * @see https://docs.angularjs.org/guide/controller
 */
app.controller('appointmentDetailsModalCtrl', ['$scope', '$uibModal','timeFormat', 'phoneTypes', 'apptHistory', 'appointmentDataProvider', 'appointmentDetails', 'taxData', 'notAvailableDefaults', 'clientInfo', 'reminderPreferenceValues',
    function ($scope,$uibModal, timeFormat, phoneTypes, apptHistory, appointmentDataProvider, appointmentDetails, taxData, notAvailableDefaults, clientInfo, reminderPreferenceValues) {

    var self = this;
    self.showClientInfo = false;
    self.timeFormat = timeFormat;
   
    /**
    * Constant representing Not Available strings("N/A")
    * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#notAvailableDefaults
    * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
    */
    self.notAvailableDefaults = notAvailableDefaults;

    /*To load appointment information*/
    getAppointmentInfo();
   

    /*To get appointment details*/
    function getAppointmentInfo() {
        self.phoneTypes = _.values(phoneTypes);

        var appointmentId = $scope.apptId,
        appointmentDetailsParams = {
            Appointment_Id: parseInt(appointmentId)
        };

        var query = appointmentDetails.query(appointmentDetailsParams);
       
        /**
        * Success handler function for the appointment info.
        * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetAppointmentInfoSuccess
        * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
        */
        function handleGetAppointmentInfoSuccess(appointmentDetails) {

            self.appointmentInfo = appointmentDetails.Response[0];

            /*To set N/A*/
            resetClientInfo(self.appointmentInfo.Appointment.ClientInfo);
            resetAppointmentInfo(self.appointmentInfo.Appointment);
            resetOfficeInfo(self.appointmentInfo.Appointment.OfficeInfo);
            resetEmployeeInfo(self.appointmentInfo.Appointment.EmployeeInfo);

            if (self.appointmentInfo && self.appointmentInfo.Appointment && self.appointmentInfo.Appointment.ClientInfo) {

                var isLanguagePrefered = self.appointmentInfo.Appointment.ClientInfo.Client_Latino_Lang_Cd == 1 ? true : false;
                self.appointmentInfo.Appointment.ClientInfo["isLanguagePrefered"] = isLanguagePrefered;
            }
            /*To compare with type - Email/Phone*/
            self.appointmentInfo.reminderPreferenceValues = reminderPreferenceValues;

            /*To save and close*/
            self.appointmentInfo.saveAndClose = function () {
                triggerErrorMessage(function (isValid) {
                    //If isValid is true, continue to save data
                });
            }

            self.appointmentInfo.notesValue = "";
            var length = 0;
                        if (self.appointmentInfo.Appointment.Appt_Note_txt){
            length = self.appointmentInfo.Appointment.Appt_Note_txt
            }
            self.appointmentInfo.noteLength = 1500 - length;

            /*To change the check box - always one checkbox should be in selected mode*/
            self.appointmentInfo.checkPhoneOrEmail = function (type) {

                if (type === reminderPreferenceValues.TEXT) {
                    self.appointmentInfo.Appointment.Is_Email = false;
                    self.clientForm.hasEmail = false;
                }
                else if (type === reminderPreferenceValues.EMAIL) {
                    self.appointmentInfo.Appointment.Is_Mobile = false;
                    self.clientForm.hasMobilePhone = false;
                }
            }
        }

        /**
         * Failure handler function for the appointment info.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetAppointmentInfoFailure
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetAppointmentInfoFailure() {

        }

        /**
         * Finally handler function for the appointment info.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetAppointmentInfoFinally
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetAppointmentInfoFinally() {

        }

        // Launch, then wait for both queries to complete.
        query.$promise.then(handleGetAppointmentInfoSuccess, handleGetAppointmentInfoFailure).finally(handleGetAppointmentInfoFinally);

    }

    /*To reset client information with N/A*/
    function resetClientInfo(clientInfo) {

        /*To concat first , middle and last name..*/
        var fullName = getFullName(clientInfo);
        self.appointmentInfo.Appointment.ClientInfo["Full_Name"] = fullName || fullName;
       
        self.appointmentInfo.Appointment.ClientInfo.Last4SSN = clientInfo.Last4SSN || 'N/A';
        self.appointmentInfo.Appointment.ClientInfo.Client_Rating = clientInfo.Client_Rating || 'N/A';
    }
    /*To reset appointment information with N/A*/
    function resetAppointmentInfo(appointment) {
        self.appointmentInfo.Appointment.Originating_System = appointment.Originating_System || 'N/A';
        self.appointmentInfo.Appointment.Product_Desc = appointment.Product_Desc || 'N/A';
        self.appointmentInfo.Appointment["Appt_Start_And_End_Time"] = appointment.StartDateTime && appointment.EndDateTime ? moment(appointment.StartDateTime).format(timeFormat.SHORT_HOUR_FORMAT) + "-" + moment(appointment.EndDateTime).format(timeFormat.SHORT_HOUR_FORMAT) : 'N/A';
        self.appointmentInfo.Appointment["Appt_Month_Day"] = appointment.StartDateTime ? moment(appointment.StartDateTime).format(timeFormat.MONTH_NAME_DATE_FORMAT) : 'N/A';
    }
    /*To reset office information with N/A*/
    function resetOfficeInfo(office) {
        var addressLine = "", locationStr = "",  officeId = 0;
        officeId = office.Office_Id || "";
        addressLine += office.Address_Line_1_Txt || "";
        addressLine += office.Address_Line_2_Txt || "";

        locationStr = officeId > 0 && addressLine.length > 0 ? officeId + "-" + addressLine : addressLine.length > 0 ? addressLine : officeId;
        self.appointmentInfo.Appointment.OfficeInfo["Location_Str"] = locationStr || 'N/A';
    }
    /*To reset employee information with N/A*/
    function resetEmployeeInfo(employee) {

        var employeeStr = getFullName(employee);
        self.appointmentInfo.Appointment.EmployeeInfo["Tax_Pro"] = employeeStr || 'N/A';

    }

    /*To get appointment history*/
    self.getAppointmentHistory = function() {

    /*To form the api query*/
        var appointmentId = $scope.apptId,
        appointmentHistoryParams = {
            Appointment_Id: parseInt(appointmentId)
        };
    /*To make rest api call*/
        var query = apptHistory.get(appointmentHistoryParams);

        /**
        * Success handler function for the appointment history.
        * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetAppointmentHistorySuccess
        * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
        */
        function handleGetAppointmentHistorySuccess(apptHistory) {

            self.appointmentHistory = apptHistory.Response;
        }

        /**
         * Failure handler function for the appointment history.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetAppointmentHistoryFailure
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetAppointmentHistoryFailure() {

        }

        /**
         * Finally handler function for the appointment history.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetAppointmentHistoryFinally
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetAppointmentHistoryFinally() {

        }

        // Launch, then wait for both queries to complete.
        query.$promise.then(handleGetAppointmentHistorySuccess, handleGetAppointmentHistoryFailure).finally(handleGetAppointmentHistoryFinally);

    }
            
    /*To get client info based on the client id*/
    self.showClient = function () {
       
        var clientId = self.appointmentInfo.Appointment.ClientInfo.Client_Id;

        self.appointmentInfo.Appointment["Is_Mobile"] = self.appointmentInfo.Appointment.Appt_Notification_Pref_Cd === 'N' ? false : self.appointmentInfo.Appointment.Appt_Notification_Pref_Cd === 'T' ? true : false;
        self.appointmentInfo.Appointment["Is_Email"] = self.appointmentInfo.Appointment.Appt_Notification_Pref_Cd === 'N' ? false : self.appointmentInfo.Appointment.Appt_Notification_Pref_Cd === 'E' ? true : false;

        /*To form the api query*/
        var clientInfoParams = {
            Client_Id: parseInt(clientId)
        };
        /*To make rest api call*/
        var query = clientInfo.get(clientInfoParams);

        query.$promise.then(function (clientInfo) {
            /*To display history info in UI*/
            self.clientForm = clientInfo.Response[0];
            /*To compare with appointment clientinfo*/
            compareClientInfo(self.clientForm);
        }, function (res) { });

        self.showClientInfo = true;
    }
    /*To compare client info from appointment and client info from api*/
    function compareClientInfo(clientInfo) {

        self.clientForm.PhoneType = self.clientForm.PhoneType || 'Home';

        var fullName = getFullName(clientInfo);
        if (self.appointmentInfo.Appointment.Full_Name !== fullName) {
            self.appointmentInfo.Appointment.ClientInfo["Full_Name"] = fullName || 'N/A';
        }
        if (self.appointmentInfo.Appointment.ClientInfo.Last4SSN !== clientInfo.Last4SSN){
            self.appointmentInfo.Appointment.ClientInfo.Last4SSN = clientInfo.Last4SSN || 'N/A';
        }

        self.clientForm.hasPhone = false;
        self.clientForm.hasMobilePhone = false;
        self.clientForm.hasEmail = false;
    }
    /*To concat all names (First, Middle and Last)*/
    function getFullName(data) {

        var fullName = "";
        if (data.First_NM) {
            fullName += data.First_NM;
        }
        if (data.Middle_NM) {
            fullName += fullName.length > 0 ? " " + data.Middle_NM : data.Middle_NM;
        }
        if (data.Last_NM) {
            fullName += fullName.length > 0 ? " " + data.Last_NM : data.Last_NM;
        }
        return fullName;
    }
    /*To display error message*/
    function triggerErrorMessage(callBack) {
        /*To get form scope*/
        var formScope = angular.element(document.querySelector('[name="editClientInfo"]')).scope().editClientInfo;

        self.clientForm.hasEmail = self.appointmentInfo.Appointment.Is_Email && formScope.email.$invalid ? true : false;
        self.clientForm.hasMobilePhone = self.appointmentInfo.Appointment.Is_Mobile && formScope.mobilePhone.$invalid ? true : false;
        self.clientForm.hasPhone = formScope.phoneNo.$invalid ? true : false;
        var isValid = !self.clientForm.hasEmail && !self.clientForm.hasMobilePhone && !self.clientForm.hasPhone ? true : false;
        callBack(isValid);
    }
    /*To close popup*/
    function closePopup() {
        // close the modal
        $scope.activeModal.close();
        $scope.activeModal = undefined;

        // destroy the modals custom scope
        $scope.$destroy();
    }

    /*Close pop up function*/
    self.close = function () {

        if (self.clientForm) {
            triggerErrorMessage(function (isValid) {
                if (isValid) {
                    closePopup();
                } 
            });
        } else {
            closePopup();
        }
    }

    /**
     * Method for getting tax data required for Prior client's pre interview screen
     * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#getTaxData
     * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
     * @function
     */
    self.getTaxData = function () {

        //launch tax details Api
        getTaxDataDetails();
        
        /**
         * Success handler function for the tax data.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetTaxDataSuccess
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetTaxDataSuccess(taxDataInfo) {

            self.taxDataDetails = taxDataInfo.Response;

            self.balanceVal = true;

            if (self.taxDataDetails.Balance_Due_Amt === 0 || self.taxDataDetails.Balance_Due_Amt === null) {

                if (self.taxDataDetails.Refund_Amt > 0) {
                    self.refundVal = true;
                    self.balanceVal = false;
                }
                
            }

        }

        /**
         * Failure handler function for the tax data.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetTaxDataFailure
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetTaxDataFailure() {
            
        }

        /**
         * Finally handler function for the tax data.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#handleGetTaxDataFinally
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function handleGetTaxDataFinally() {

        }

        /**
         * Function to call the API to request tax data for a prior client.
         * @name appointmentDetailsModal.controllers.appointmentDetailsModalCtrl#getTaxData
         * @propertyOf appointmentDetailsModal.controllers.appointmentDetailsModalCtrl
         */
        function getTaxDataDetails() {

            var taxDataParams = {
                Client_Id: self.appointmentInfo.Appointment.ClientInfo.Client_Id,
                Gi_Id: self.appointmentInfo.Appointment.ClientInfo.Gi_Id,
                //Enterprise_Id: self.provider.Appointment.ClientInfo.Enterprise_Id
            };
            var query = taxData.get(taxDataParams);

            // Launch, then wait for both queries to complete.
            query.$promise.then(handleGetTaxDataSuccess, handleGetTaxDataFailure).finally(handleGetTaxDataFinally);
        };

    };    

}]);